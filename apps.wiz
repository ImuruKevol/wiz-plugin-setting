[{"dic":{"default":{}},"id":"core.setting.acl","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title Access Control\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define access control for access wiz admin interface.\n                                .text-muted you can use `framework` (flask app object) in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.wiz.acl\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/acl","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.after_request","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title After Request\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define process after request.\n                                .text-muted you can use `response` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.after_request\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/after_request","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.build_resource","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title Build Resource\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define compile or trigger when resource download.\n                                .text-muted you can use `resource_dirpath`, `resource_filepath` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.build_resource\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/build_resource","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.configuration","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: calc(100% - 112px);\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title Configuration\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Configuration about WIZ Framework.\n                                .text-muted you can set default theme, categories, menus.\n\n                        .info-form.row.first-child\n                            .col-md-4 \n                                h4.mb-0 Default Theme\n                                span.text-muted If WIZ Interface not setup theme, use this default theme.\n                            .col-md-8.pt-3\n                                select.form-select.text-center(ng-model=\"data.wiz.theme.default\")\n                                    option(value='{{theme}}' ng-repeat=\"theme in themes\") {{theme}}\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Category\n                                span.text-muted Interface category. Seperated by line. Each lines defined as 'key: displayname'.\n                            .col-md-8.text-center\n                                textarea.form-control(rows=5 ng-model=\"data.wiz.category\" placeholder=\"route: Route\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Top Menu\n                                span.text-muted WIZ Admin interface's top menu list. Septerated by line.\n                            .col-md-8.text-center\n                                textarea.form-control(rows=5 ng-model=\"data.wiz.topmenus\" placeholder=\"HOME: /\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Read File Support\n                                span.text-muted Support filetype for read file as code in theme/model/resources directory.\n                            .col-md-8.text-center\n                                textarea.form-control(rows=10 ng-model=\"data.wiz.supportfile\" placeholder=\".py: python\")\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/configuration","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.onboot","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title On Boot\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define wiz framework on start.\n                                .text-muted you can use `app` (flask app), `socketio` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.build\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/onboot","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.onerror","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title On Error\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define error handler.\n                                .text-muted you can use `wiz` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.on_error\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/onerror","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.status","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title System Status\n\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted System status and configuration.\n                                .text-muted you can set host, port of developement server.\n\n                        .info-form.row.first-child\n                            .col-md-4 \n                                h4 SEASON WIZ Version\n                            .col-md-8.text-center\n                                a(href=\"https://github.com/season-framework/wiz\" target=\"_blank\")\n                                    h4= SEASON_VERSION\n\n                        .info-form.row\n                            .col-md-4 \n                                h4 Python Version\n                            .col-md-8.text-center\n                                h4= PYTHON_VERSION\n\n                        .info-form.row\n                            .col-md-4\n                                h4.mb-0 Build Clean\n                                span.text-muted Clean all build caches.\n                            .col-md-8.pt-2\n                                button.btn.btn-block.btn-outline-dark(ng-click=\"event.clean()\") Clean\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Host\n                                span.text-muted Development server host. Defaults to '0.0.0.0'.\n                            .col-md-8.pt-3\n                                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.host\" placeholder=\"0.0.0.0\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Port\n                                span.text-muted Development server port. Default to '3000'.\n                            .col-md-8.pt-3\n                                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.port\" placeholder=\"3000\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 app.secret_key\n                                span.text-muted Session secret key for flask app. Default to 'season-wiz'.\n                            .col-md-8.pt-3\n                                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.secret_key\" placeholder=\"season-wiz\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Log Level\n                                span.text-muted If you don’t configure logging, default log level is usually ‘warning’.\n                            .col-md-8.pt-3\n                                select.form-select.text-center(ng-model=\"data.framework.log_level\")\n                                    option(value=0) DEBUG\n                                    option(value=1) INFO\n                                    option(value=2) DEV\n                                    option(value=3) WARNING\n                                    option(value=4) ERROR\n                                    option(value=5) CRITICAL\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/status","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"}]